<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: eZ Publish | HarmsSite]]></title>
  <link href="http://harmssite.com/blog/categories/ez-publish/atom.xml" rel="self"/>
  <link href="http://harmssite.com/"/>
  <updated>2013-09-16T09:41:37-05:00</updated>
  <id>http://harmssite.com/</id>
  <author>
    <name><![CDATA[Tyler Harms]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eZ Publish 5 - First Thoughts]]></title>
    <link href="http://harmssite.com/2013/01/ez-publish-5-first-thoughts/"/>
    <updated>2013-01-19T00:00:00-06:00</updated>
    <id>http://harmssite.com/2013/01/ez-publish-5-first-thoughts</id>
    <content type="html"><![CDATA[<div class="pull-right"><img class="" alt="Syfomy Logo" title="Symfony Logo" src="https://s3.amazonaws.com/hs_blog_content/images/symfony-logo.png" width="206" height="205" /></div>


<p>I finally decided on my first eZ Publish 5 project&hellip; my site of course. I am currently in the middle of upgrading my wordpress install to eZ Publish. Honestly, I don&rsquo;t really need anything more than a simple Wordpress install, but it will be nice to get an eZ5 site under my belt.</p>

<p>Seeing as I am in the middle of development, there have been a few bumps in the development road that I have found and would like to share. Firstly, I can find no way to run eZ Publish 5 completely in legacy mode, no matter what I do my pagelayout template needs to be a twig template. I posed the question to the eZ Community and it sounds like this should be possible, but it just wouldn&rsquo;t work for me (see the discussion <a href="http://bit.ly/WhVHwu" title="Overriding templates in eZ 5">here</a>). I actually don&rsquo;t have a problem with this, it&rsquo;s not like being forced to use Symfony is a bad thing.</p>

<p>Second, I do not see a strait-forward way to run multiple sites in one eZ Publish 5 install right now. Site settings are declared in the <code>ezpublish.yml</code> file and are grouped appropriately. My problem is that the <code>parameters.yml</code> file only allows for the declaration of one default template. In my opinion the default template declaration should be tied to a siteaccess or a siteaccess group.</p>

<p>Third, the <code>index_dev.php</code> file doesn&rsquo;t work for some reason. It would be nice to be able to use the Symfony dev toolbar. So far my only workaround has been to add the dev params to the index.php file. Either fixing this or allowing <code>DebugOutput</code> on a Symfony generated page would suffice.</p>

<p>It wouldn&rsquo;t be fair to simply criticize eZ5, because it does work. The eZ Team did a hell of a job with eZ5, far more than I would have expected for a first iteration. Honestly I was expecting eZ5 to switch to the Symfony Components for round 1 and work on the rest later.</p>

<p>I think that far and above any other nicety of eZ5 is the ability to generate custom routes. Creating a custom module in eZ 4 was not exactly easy, but now with Symfony, creating a custom route/controller/view is extremely straight-forward and borderline easy. If a person has ever worked with Symfony in the past, creating custom &lsquo;modules&rsquo; will be a snap.</p>

<p>Another awesome part of eZ5 is the full REST API. Although I have yet to use it, I know it is there and that the eZ Team put a lot of work into it, so I have to give it props.</p>

<p>Finally, twig is awesome to work with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Symfony]]></title>
    <link href="http://harmssite.com/2012/11/learning-symfony/"/>
    <updated>2012-11-21T00:00:00-06:00</updated>
    <id>http://harmssite.com/2012/11/learning-symfony</id>
    <content type="html"><![CDATA[<div class="pull-right"><img title="Nashville Symfony" src="https://s3.amazonaws.com/hs_blog_content/images/symfony2.jpg" alt="Nashville Symfony" width="240" height="180" /></div>


<p> I have spent a good deal of my freetime this past month or two learning as much about about the php framework Symfony as possible. The moment that eZ Systems announced that they were adopting the Symfony framework I knew that I would be be spending some time with it. I have found that Symfony doesn&rsquo;t have the lowest barrier to entry so it has been a process, to say the least. I have a blog that has helped matters a great deal and so I wanted to give it some props here. If you are like me, wanting to learn Symfony but lacking time and resources, you should really check this site out: <a href="http://tutorial.symblog.co.uk/" title="Symblog: Creating a Blog in Symfony2">Symblog: Creating a Blog in Symfony2</a></p>

<p>The blog starts with the basics and explores a good deal of Symfony components in detail. In the end you will be left with a barley usable blog, but that is alright, it leaves you with a project to fix. It is a tutorial for Symfony 2.0, and because Symfony is currently on 2.1.3 you will notice some part don&rsquo;t work the way you expect (but I think that forces you to learn more anyway). The tutorial also doesn&rsquo;t use Composer at all; so remember, when the blog tells you to install something, use Composer and skip over the way they tell you how to do it. I hope you enjoy the tutorial, I know I did (I have not currently completed the tutorial but am nearing completion at the time of this writing).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Solr to fit your needs Part 1]]></title>
    <link href="http://harmssite.com/2012/08/optimizing-solr-to-fit-your-needs-part-1/"/>
    <updated>2012-08-25T00:00:00-05:00</updated>
    <id>http://harmssite.com/2012/08/optimizing-solr-to-fit-your-needs-part-1</id>
    <content type="html"><![CDATA[<div class="pull-right"><img class="zemanta-img-inserted zemanta-img-configured" title="Solr logo" src="https://s3.amazonaws.com/hs_blog_content/images/Solr-logo.png" alt="Solr logo" width="283" height="156" /></div>


<p>Let me start by saying that eZ Find is a fantastic implementation of <a class="zem_slink" title="Apache Solr" href="http://lucene.apache.org/solr/" rel="homepage" target="_blank">Solr</a> functionality. With eZ Find you get a fantastic search, out of the box. eZ Find gathers all the content in your system and organizes it for you into strings, text, and keywords (there are more but those the types I use most often). It can look at an <a class="zem_slink" title="EZ Publish" href="http://ez.no/" rel="homepage" target="_blank">eZ Publish</a> keyword and know that it should thereby be a Solr keyword, again, all out of the box. There are however some serious limitations when it comes time to customize it to meet your system&rsquo;s needs. Do not underestimate the power found in customizing Solr to meet your website&rsquo;s needs. The default setup is great, it&rsquo;s made to fit into any system with very little effort; but, just because it&rsquo;s made to fit in any system does not mean that it should be used for every system.</p>

<p>One of the best things we could have ever done for a large Solr install was to customize a default search field. You might say, &ldquo;But eZ Find already creates a default search field for you.&rdquo; And you&rsquo;d be right.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- field for the QueryParser to use when an explicit fieldname is absent --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;defaultSearchField&gt;</span>ezf_df_text<span class="nt">&lt;/defaultSearchField&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The thing that the default search field in eZ Find does not do, however, is get used. There is no way in eZ Find to tell it to search just one field (at least as far as I know). I did some testing in our environment, these numbers will change from system to system, but in our&rsquo;s each search took almost 10 times as long to search all fields individually vs searching just 1 field. We gave eZ Find the option to search one given field, if defined, and it vastly improved our search experience.</p>

<p>eZ Find by default looks at all &lsquo;searchable&rsquo; fields and adds them to either the <a title="qf" href="http://wiki.apache.org/solr/DisMaxQParserPlugin#qf_.28Query_Fields.29"><code>qf</code></a> (if you are using the dismax search like you should be) or it searches every searchable field individually (<code>attr_title_t:(*:*)</code>, <code>attr_title_s:(*:*)</code>, etc, etc, for all searchable fields). All the &lsquo;searchable&rsquo; fields are by default added to the <code>ezf_df_text</code> field, so you should really do yourself a favor and search just one field, it is a noticable speed improvement, especially in large systems.</p>

<p>In Part 2 I will talk about how to better optimize the Solr <code>schema.xml</code> file using the <code>ezf_df_text</code> field.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EZ Publish with Sublime]]></title>
    <link href="http://harmssite.com/2012/06/ez-publish-with-sublime/"/>
    <updated>2012-06-30T00:00:00-05:00</updated>
    <id>http://harmssite.com/2012/06/ez-publish-with-sublime</id>
    <content type="html"><![CDATA[<div class="pull-right"><img title="Sublime Text icon" src="https://s3.amazonaws.com/hs_blog_content/images/sublime_text_icon_2181-150x150.png" alt="Sublime Text icon" width="150" height="150" /></div>


<p>A while back I fell in love with <a title="Sublime Text 2" href="http://bit.ly/MHuK34" target="_blank">Sublime Text 2</a> and its' many advantages over TextMate. What it lacked however was any real support for the eZ Publish templating language (no different than TextMate). What I wanted was a simple editor that offered variable and method highlighting equivalent to a nice IDE like PHPStorm. I was originally using the Smarty package for TextMate (you can use any TextMate package in Sublime), but that does not offer a lot of method highlighting support for eZ. So what I decided to do was use the Smarty package as a template for adding more language support for eZ Publish. What I have is far from complete; I usually only add to it when I use a method that is not already supported. You can find it out on <a title="ez sublime on GitHub" href="http://bit.ly/N4eTcp" target="_blank">GitHub</a>. It is my hope that there are some eZ Publish devs out there that really enjoy Sublime as I do and want to help me grow the package. Remember, it is far from complete, but nonetheless, I really hope that you enjoy the language highlighting, and if you do feel free to contribute.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Shards in eZ Find]]></title>
    <link href="http://harmssite.com/2012/06/fixing-shards-in-ez-find/"/>
    <updated>2012-06-29T00:00:00-05:00</updated>
    <id>http://harmssite.com/2012/06/fixing-shards-in-ez-find</id>
    <content type="html"><![CDATA[<p>I am way overdue on my promise to show you how to make shards work. As I said before, shards in eZ Find do not work out of the box. In the code the <code>$shardQuery</code> is built properly but the variable is never actually used after it is created. What I did to make this work is a simple if/else block inside the <code>$queryHandler</code> switch. I am not submitting this as a pull request to eZ Find at the moment just because I do not like the way I made this work, I feel like there is a better way to do it. Nevertheless here is my code to make Shards work, I hope you enjoy and moreover I hope you suggest a better way to make the code work ;)</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ezfezpsolrquerybuilder.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">switch ( $queryHandler )</span>
</span><span class='line'><span class="x">{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;case &#39;standard&#39;:</span>
</span><span class='line'><span class="x">    // @todo: this is more complicated</span>
</span><span class='line'><span class="x">    // build the query against all &quot;text&quot; like fields</span>
</span><span class='line'><span class="x">    // should take into account all the filter fields and class filters to shorten the query</span>
</span><span class='line'><span class="x">    // need to build: Solr q</span>
</span><span class='line'><span class="x">    if ( array_key_exists( &#39;fields&#39;, $boostFunctions ) )</span>
</span><span class='line'><span class="x">    {</span>
</span><span class='line'><span class="x">        if (false != $shardQuery) {</span>
</span><span class='line'><span class="x">        $handlerParameters = array ( &#39;q&#39; =&amp;gt; $this-&amp;gt;buildMultiFieldQuery( $searchText, array_merge( $queryFields, $extraFieldsToSearch ), $boostFunctions[&#39;fields&#39;] ),</span>
</span><span class='line'><span class="x">                                 &#39;qt&#39; =&amp;gt; &#39;standard&#39;,</span>
</span><span class='line'><span class="x">                                 &#39;shards&#39; =&amp;gt; $shardQuery);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">        else {</span>
</span><span class='line'><span class="x">        $handlerParameters = array ( &#39;q&#39; =&amp;gt; $this-&amp;gt;buildMultiFieldQuery( $searchText, array_merge( $queryFields, $extraFieldsToSearch ), $boostFunctions[&#39;fields&#39;] ),</span>
</span><span class='line'><span class="x">                                 &#39;qt&#39; =&amp;gt; &#39;standard&#39;, );</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    else</span>
</span><span class='line'><span class="x">    {</span>
</span><span class='line'><span class="x">        if (false != $shardQuery) {</span>
</span><span class='line'><span class="x">        $handlerParameters = array ( &#39;q&#39; =&amp;gt; $this-&amp;gt;buildMultiFieldQuery( $searchText, array_merge( $queryFields, $extraFieldsToSearch ) ),</span>
</span><span class='line'><span class="x">                                 &#39;qt&#39; =&amp;gt; &#39;standard&#39;,</span>
</span><span class='line'><span class="x">                                 &#39;shards&#39; =&amp;gt; $shardQuery);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">        else{</span>
</span><span class='line'><span class="x">            $handlerParameters = array ( &#39;q&#39; =&amp;gt; $this-&amp;gt;buildMultiFieldQuery( $searchText, array_merge( $queryFields, $extraFieldsToSearch ) ),</span>
</span><span class='line'><span class="x">                                 &#39;qt&#39; =&amp;gt; &#39;standard&#39; );</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">case &#39;simplestandard&#39;:</span>
</span><span class='line'><span class="x">    // not to do much, searching is against the default aggregated field</span>
</span><span class='line'><span class="x">    // only highlightfields</span>
</span><span class='line'><span class="x">    $highLightFields = array ( &#39;ezf_df_text&#39; );</span>
</span><span class='line'><span class="x">    $handlerParameters = array ( &#39;q&#39; =&amp;gt; $searchText,</span>
</span><span class='line'><span class="x">                                 &#39;qt&#39; =&amp;gt; &#39;standard&#39;,</span>
</span><span class='line'><span class="x">                                 &#39;hl.usePhraseHighlighter&#39; =&amp;gt; &#39;true&#39;,</span>
</span><span class='line'><span class="x">                                 &#39;hl.highlightMultiTerm&#39; =&amp;gt; &#39;true&#39; );</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'><span class="x">case &#39;ezpublish&#39;:</span>
</span><span class='line'><span class="x">    // the dismax based handler, just keywordss input, most useful for ordinary queries by users</span>
</span><span class='line'><span class="x">    // need to build: Solr q, qf, dismax specific parameters</span>
</span><span class='line'>
</span><span class='line'><span class="x">default:</span>
</span><span class='line'><span class="x">    // ezpublish of course, this to not break BC and is the most &quot;general&quot;</span>
</span><span class='line'><span class="x">    // if another value is specified, it is supposed to be a dismax like handler</span>
</span><span class='line'><span class="x">    // with possible other tuning variables then the stock provided &#39;ezpublish&#39; in solrconfi.xml</span>
</span><span class='line'><span class="x">    // remark it should be lowercase in solrconfig.xml!</span>
</span><span class='line'><span class="x">    if (false != $shardQuery) {</span>
</span><span class='line'><span class="x">        $handlerParameters = array ( &#39;q&#39; =&amp;gt; $searchText,</span>
</span><span class='line'><span class="x">                                     &#39;qf&#39; =&amp;gt; implode( &#39; &#39;, array_merge( $queryFields, $extraFieldsToSearch ) ),</span>
</span><span class='line'><span class="x">                                     &#39;qt&#39; =&amp;gt; $queryHandler,</span>
</span><span class='line'><span class="x">                                     &#39;shards&#39; =&amp;gt; $shardQuery );</span>
</span><span class='line'><span class="x">    } else {</span>
</span><span class='line'><span class="x">        $handlerParameters = array ( &#39;q&#39; =&amp;gt; $searchText,</span>
</span><span class='line'><span class="x">                                     &#39;qf&#39; =&amp;gt; implode( &#39; &#39;, array_merge( $queryFields, $extraFieldsToSearch ) ),</span>
</span><span class='line'><span class="x">                                     &#39;qt&#39; =&amp;gt; $queryHandler );</span>
</span><span class='line'>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
