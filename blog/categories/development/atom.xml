<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | HarmsSite]]></title>
  <link href="http://harmssite.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://harmssite.com/"/>
  <updated>2014-03-24T09:20:45-05:00</updated>
  <id>http://harmssite.com/</id>
  <author>
    <name><![CDATA[Tyler Harms]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abstract Time Stamped Entity in Symfony2]]></title>
    <link href="http://harmssite.com/2014/02/abstract-time-stamped-entity-in-symfony2/"/>
    <updated>2014-02-07T16:56:00-06:00</updated>
    <id>http://harmssite.com/2014/02/abstract-time-stamped-entity-in-symfony2</id>
    <content type="html"><![CDATA[<p>One of my favorite features of Ruby on Rails is that all models are timestamped by default. Ruby on Rails, of course, opts for convention over configuration. Symfony2, on the other hand, opts for configuration over convention. Anyone who has worked with Symfony2 can speak to the mass of config files that exist in a project. I can understand, therefore, why timestamped models (entities) are not a feature in Symfony2. In this post I will show how to add timestamp all your Symfony2 entities. For this post, I chose to use Doctrine as my ORM, so all code show directly relates to Doctrine and Symfony2.</p>

<p>Luckily, adding and updated and created fields to an entity in Symfony2 with Doctrine is quite easy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&amp;ldquo;created&amp;rdquo;, type=&amp;ldquo;datetime&amp;rdquo;)</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">private $created;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&amp;ldquo;updated&amp;rdquo;, type=&amp;ldquo;datetime&amp;rdquo;)</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">private $updated;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;public function __construct()</span>
</span><span class='line'><span class="x">{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;$this-&amp;gt;setCreated(new \DateTime());</span>
</span><span class='line'><span class="x">$this-&amp;gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// getters &amp;amp; setters&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Auto set the updated date</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\PreUpdate</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">public function setUpdatedValue()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">   $this-&gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code should be pretty self explanitory, we have two DateTime field types that get initially set on entity creation in the contstructor. I then add a <code>setUpdatedValue()</code> function that runs when on PreUpdate of the entity.</p>

<p>The above code works very well, but it is not an ideal solution for working with multiple models. Of course, we could add the updated/created values to every entity, but that wouldn&rsquo;t be very <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" title="Don't Repeat Yourself">DRY</a> of us.</p>

<!-- more -->


<p>The solution is to use an <a href="http://www.php.net/manual/en/language.oop5.abstract.php">Abstract Class</a> that our entity can extend. The abstract class, <code>TimeStampedEntity</code>, will have two entity variables <code>$updated</code> and <code>$created</code> and will look nearly identical to the code above when it is complete. The key that will make this work with Doctrine and Symfony2 is Doctrine&rsquo;s <a href="http://docs.doctrine-project.org/en/latest/reference/inheritance-mapping.html#mapped-superclasses"><code>MappedSuperclass</code></a> declaration that tells Symfony and Doctrine that the abstract class is a Superclass with declared entity attributes. What we are left with is a Superclass that can extend any model to add <code>updated</code> and <code>created</code> attributes to your data.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TimeStampedEntity.php <a href="https://gist.github.com/harmstyler/8875484">https://gist.github.com/harmstyler/8875484</a> Gist </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * TimeStampedEntity.php</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;namespace HarmsTyler\Common\Entity;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;use Doctrine\ORM\Mapping as ORM;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Post</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\MappedSuperclass</span>
</span><span class='line'><span class="x"> * @ORM\HasLifecycleCallbacks</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">abstract class TimeStampedEntity {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;/**</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&quot;created&quot;, type=&quot;datetime&quot;)</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">private $created;</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&quot;updated&quot;, type=&quot;datetime&quot;)</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">private $updated;</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Set created</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param \DateTime $created</span>
</span><span class='line'><span class="x"> * @return Post</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setCreated($created)</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $this-&amp;gt;created = $created;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Get created</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @return \DateTime</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function getCreated()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;created;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Set updated</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param \DateTime $updated</span>
</span><span class='line'><span class="x"> * @return Post</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setUpdated($updated)</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $this-&amp;gt;updated = $updated;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Get updated</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @return \DateTime</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function getUpdated()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;updated;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Auto set the updated date</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\PreUpdate</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setUpdatedValue()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">   $this-&amp;gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Set initial value for created/updated values</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\PrePersist</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setCreatedValues()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $this-&amp;gt;setCreated(new \DateTime());</span>
</span><span class='line'><span class="x">    $this-&amp;gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>An example in use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Post.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;namespace Blend\Iterate\BlogBundle\Entity;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;use HarmsTyler\Common\Entity\TimeStampedEntity;</span>
</span><span class='line'><span class="x">use Doctrine\ORM\Mapping as ORM;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Post</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Table()</span>
</span><span class='line'><span class="x"> * @ORM\Entity</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">class Post extends TimeStampedEntity</span>
</span><span class='line'><span class="x">{</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>edited to add setCreatedValues()</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[South Dakota Code Camp 2013]]></title>
    <link href="http://harmssite.com/2013/11/south-dakota-code-camp-2013/"/>
    <updated>2013-11-11T19:47:00-06:00</updated>
    <id>http://harmssite.com/2013/11/south-dakota-code-camp-2013</id>
    <content type="html"><![CDATA[<p>I would say that South Dakota Code Camp 2013 was another huge success. The organizers were once again able to find some great speakers that cover a wide array of topics. Moreover, this year I had the opportunity to speak. I chose to speak about Django, one of my favorite web frameworks. Anyway, here is a link to my slides.</p>

<p><a class="embedly-card" href="http://harmssite.com/intro-to-django/">An Introduction to Django / Tyler Harms</a></p>

<script>!function(a){var b="embedly-platform",c="script";if(!a.getElementById(b)){var d=a.createElement(c);d.id=b,d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}}(document);</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Animate Body Scroll For All Browsers]]></title>
    <link href="http://harmssite.com/2013/08/jquery-animate-body-for-all-browsers/"/>
    <updated>2013-08-09T08:52:00-05:00</updated>
    <id>http://harmssite.com/2013/08/jquery-animate-body-for-all-browsers</id>
    <content type="html"><![CDATA[<p>It turns out that when trying to use jQuery&rsquo;s <code>animate</code> to <code>scrollTop</code> on the main body of an html document different browsers require different targets to scroll to. Webkit requires targeting the <code>body</code> of the document while all other browsers that I know of use <code>html</code>. The typical solution is to target both in the same call:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Problematic Callback </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">html</span><span class="p">,</span> <span class="nx">body</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">animate</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">scrollTop</span><span class="o">:</span> <span class="s1">&#39;0px&#39;</span><span class="p">,</span><span class="s1">&#39;fast&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// Code to be fired when complete goes here (fired twice)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This solution is problematic, however, because even though the scrollTop will only work once, the callback is fired twice. That means that if we were relying on the callback to tell us that the function is complete, our complete function would fire twice.
Luckily, there is a relatively simple solution to this problem. Using jQuery&rsquo;s browser plugin we can have webkit browsers target the <code>body</code> and all others target the <code>html</code>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Single Callback </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// If using a newer version (&gt;= 1.9) of jQuery a separate browser</span>
</span><span class='line'><span class="c1">// plugin is required</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">webkit</span> <span class="o">?</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">body</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">animate</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">scrollTop</span><span class="o">:</span> <span class="s1">&#39;0px&#39;</span><span class="p">,</span><span class="s1">&#39;fast&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// Code to be fired when complete goes here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This solution worked well for me. I am open to different ideas or solutions if you know of any.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort Solr Facets on Per Field Basis]]></title>
    <link href="http://harmssite.com/2013/07/sort-solr-facets-on-per-field-basis/"/>
    <updated>2013-07-29T16:05:00-05:00</updated>
    <id>http://harmssite.com/2013/07/sort-solr-facets-on-per-field-basis</id>
    <content type="html"><![CDATA[<p>I recently faced a strange problem. I was faceting off of multiple <code>facet.fields</code> and I found the need to sort them independently of each other. As far as I knew up to this point <code>facet.sort</code> could only be set once. When I read the doc, however, it was claimed that the <code>facet.sort</code> could be set on a per field basis; sadly no examples were provided nor was it explained any further. Luckily, after some digging, I found out that setting the sort (index or count) on a per field is very easy.</p>

<p>A typical solr fetch with facets might look like this (assuming <code>type_s</code> is indexed):
<code>
/solr/directory/select?q=*:*&amp;wt=json&amp;indent=true&amp;facet=true&amp;facet.field=type_s
</code>
Solr sets <code>facet.sort</code> to count by default, so that can be left undeclared or can be explicitly declared, it does not matter. A problem arises, however, when you have multiple <code>facet.field</code>s and you want them sorted differently. To solve this you need to follow this format for the declared sort: <code>f.&lt;facetted_field&gt;.facet.sort=&lt;index|count&gt;</code>. Using the same example as before, but with an extra field it would look like this:
<code>
/solr/directory/select?q=*:*&amp;wt=json&amp;indent=true&amp;facet=true&amp;facet.field=type_s&amp;facet.field=location_s&amp;f.location_s.facet.sort=index
</code>
This would sort <code>type_s</code> by count (default) and sort <code>location_s</code> by index.
The opposite would also work.
<code>
/solr/directory/select?q=*:*&amp;wt=json&amp;indent=true&amp;facet=true&amp;facet.field=type_s&amp;facet.field=location_s&amp;facet.sort=index&amp;f.location_s.facet.sort=count
</code>
This would change the default sort order to use index for sort and <code>location_s</code> would use count for sorting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE10 Conditional Comments]]></title>
    <link href="http://harmssite.com/2013/06/ie10-conditional-comments/"/>
    <updated>2013-06-29T20:43:00-05:00</updated>
    <id>http://harmssite.com/2013/06/ie10-conditional-comments</id>
    <content type="html"><![CDATA[<p>Let me start by saying that I was very excited by IE10. Internet Explorer 10 was supposed to be <strong>the</strong> premier IE web browser. Microsoft was so confident that they created a browser that could meet modern standards that they dropped conditional comments in IE10. If you don&rsquo;t know anything about developing for IE, just know that it sucks; it <em>was</em>, however, aleviated some by conditional comments that allowed for custom styles/js/whatever for IE versions. My first time working with IE10 I was made harshly aware that conditional comments no longer work. What&rsquo;s worse, my site that functioned and looked great in IE9 no longer functioned in IE10. How does this happen?</p>

<p>The more I work with IE10 the more issues I find with it, Microsoft needs to bring conditional comments back. Until then, however, there is a simple script you can stick in your javascripts that will identify when IE10 is being used so that you can target it in your css or javascript.</p>

<p>The javascript:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Add IE10 class to IE10</span>
</span><span class='line'><span class="c1">// $.browser requires jquery &amp;lt; 1.9</span>
</span><span class='line'><span class="c1">// $.browser can be used in jquery &gt; 1.9 with plugin</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">msie</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">version</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ie10</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or if you use coffeescript:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffee-script'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Add</span> <span class="nx">IE10</span> <span class="k">class</span> <span class="nx">to</span> <span class="nx">IE10</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">.</span><span class="nx">browser</span> <span class="nx">requires</span> <span class="nx">jquery</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mf">1.9</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">.</span><span class="nx">browser</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">used</span> <span class="k">in</span> <span class="nx">jquery</span> <span class="o">&gt;</span> <span class="mf">1.9</span> <span class="nx">with</span> <span class="nx">plugin</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">msie</span> <span class="o">and</span> <span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">version</span> <span class="o">is</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ie10</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It is sad that we must do this for a supposed modern browser; nevertheless, I hope this helps for when you have to work with IE10.</p>
]]></content>
  </entry>
  
</feed>
