<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | HarmsSite]]></title>
  <link href="http://harmssite.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://harmssite.com/"/>
  <updated>2013-08-02T09:37:15-05:00</updated>
  <id>http://harmssite.com/</id>
  <author>
    <name><![CDATA[Tyler Harms]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sort Solr Facets on Per Field Basis]]></title>
    <link href="http://harmssite.com/2013/07/sort-solr-facets-on-per-field-basis/"/>
    <updated>2013-07-29T16:05:00-05:00</updated>
    <id>http://harmssite.com/2013/07/sort-solr-facets-on-per-field-basis</id>
    <content type="html"><![CDATA[<p>I recently faced a strange problem. I was faceting off of multiple <code>facet.fields</code> and I found the need to sort them independently of each other. As far as I knew up to this point <code>facet.sort</code> could only be set once. When I read the doc, however, it was claimed that the <code>facet.sort</code> could be set on a per field basis; sadly no examples were provided nor was it explained any further. Luckily, after some digging, I found out that setting the sort (index or count) on a per field is very easy.</p>

<p>A typical solr fetch with facets might look like this (assuming <code>type_s</code> is indexed):
<code>
/solr/directory/select?q=*:*&amp;wt=json&amp;indent=true&amp;facet=true&amp;facet.field=type_s
</code>
Solr sets <code>facet.sort</code> to count by default, so that can be left undeclared or can be explicitly declared, it does not matter. A problem arises, however, when you have multiple <code>facet.field</code>s and you want them sorted differently. To solve this you need to follow this format for the declared sort: <code>f.&lt;facetted_field&gt;.facet.sort=&lt;index|count&gt;</code>. Using the same example as before, but with an extra field it would look like this:
<code>
/solr/directory/select?q=*:*&amp;wt=json&amp;indent=true&amp;facet=true&amp;facet.field=type_s&amp;facet.field=location_s&amp;f.location_s.facet.sort=index
</code>
This would sort <code>type_s</code> by count (default) and sort <code>location_s</code> by index.
The opposite would also work.
<code>
/solr/directory/select?q=*:*&amp;wt=json&amp;indent=true&amp;facet=true&amp;facet.field=type_s&amp;facet.field=location_s&amp;facet.sort=index&amp;f.location_s.facet.sort=count
</code>
This would change the default sort order to use index for sort and <code>location_s</code> would use count for sorting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE10 Conditional Comments]]></title>
    <link href="http://harmssite.com/2013/06/ie10-conditional-comments/"/>
    <updated>2013-06-29T20:43:00-05:00</updated>
    <id>http://harmssite.com/2013/06/ie10-conditional-comments</id>
    <content type="html"><![CDATA[<p>Let me start by saying that I was very excited by IE10. Internet Explorer 10 was supposed to be <strong>the</strong> premier IE web browser. Microsoft was so confident that they created a browser that could meet modern standards that they dropped conditional comments in IE10. If you don&rsquo;t know anything about developing for IE, just know that it sucks; it <em>was</em>, however, aleviated some by conditional comments that allowed for custom styles/js/whatever for IE versions. My first time working with IE10 I was made harshly aware that conditional comments no longer work. What&rsquo;s worse, my site that functioned and looked great in IE9 no longer functioned in IE10. How does this happen?</p>

<p>The more I work with IE10 the more issues I find with it, Microsoft needs to bring conditional comments back. Until then, however, there is a simple script you can stick in your javascripts that will identify when IE10 is being used so that you can target it in your css or javascript.</p>

<p>The javascript:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Add IE10 class to IE10</span>
</span><span class='line'><span class="c1">// $.browser requires jquery &amp;lt; 1.9</span>
</span><span class='line'><span class="c1">// $.browser can be used in jquery &gt; 1.9 with plugin</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">msie</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">version</span> <span class="o">===</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ie10</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or if you use coffeescript:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffee-script'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Add</span> <span class="nx">IE10</span> <span class="k">class</span> <span class="nx">to</span> <span class="nx">IE10</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">.</span><span class="nx">browser</span> <span class="nx">requires</span> <span class="nx">jquery</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mf">1.9</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">.</span><span class="nx">browser</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">used</span> <span class="k">in</span> <span class="nx">jquery</span> <span class="o">&gt;</span> <span class="mf">1.9</span> <span class="nx">with</span> <span class="nx">plugin</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">msie</span> <span class="o">and</span> <span class="nx">$</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">version</span> <span class="o">is</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">addClass</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ie10</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It is sad that we must do this for a supposed modern browser; nevertheless, I hope this helps for when you have to work with IE10.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Site Theme]]></title>
    <link href="http://harmssite.com/2013/04/new-site-theme/"/>
    <updated>2013-04-15T08:39:00-05:00</updated>
    <id>http://harmssite.com/2013/04/new-site-theme</id>
    <content type="html"><![CDATA[<p>I have been working on getting a new site theme up and running for a while now. My hold up was that I could never commit to a platform. I knew that I wanted off Wordpress and onto something more developer friendly. Originally I was going to put this site on eZ Publish, but that just seemed like overkill. Next I thought about creating a Symfony2 blog, but I wanted to cheapen my hosting options so I opted against Symfony2. I finally decided upon Rails, hosted on the free tier of Heroku.</p>

<p>I was in the middle of development when I discovered Octopress. How I had never heard of this platform before, I don&rsquo;t know. In under 4 hours total I had my Wordpress site migrated off of Wordpress and onto a Github Pages site generated by Octopress; it was a very smooth transition. Because development was so fast, I opted to stick with Octopress and <a href="http://octopress.org/docs/deploying/github/" title="Deploying to GH-Pages">GH-Pages</a>.</p>

<p>My site is now running statically using Octopress as a site generator and Github as a free host. Octopress is built on Jekyll, so I can make plugins easily (in Ruby) as well as pull in any existing plugin with ease. Octopress seems like it is built to be <strong>the</strong> developer blogging platform. The code blocks, the post generation, and the fact that it is built on Ruby all helped me settle on Octopress as my new blogging platform. I hope you enjoy the new site!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Searching with Solr - Integrating Solr into any PHP project is easy with Solarium [REPOST]]]></title>
    <link href="http://harmssite.com/2013/03/start-search-with-solr-integrating-solr-into-any-php-project-is-easy-with-solarium-repost/"/>
    <updated>2013-03-15T00:00:00-05:00</updated>
    <id>http://harmssite.com/2013/03/start-search-with-solr-integrating-solr-into-any-php-project-is-easy-with-solarium-repost</id>
    <content type="html"><![CDATA[<p style="text-align:center;">This post is a repost of an article I wrote for <a title="Web and PHP Magazine" href="http://webandphp.com/" target="_blank">Web and PHP Magazine</a>&rsquo;s <a title="Web and PHP February Issue" href="http://webandphp.com/issue-11" target="_blank">February issue</a>.</p>

<h4>Solr has quickly become one of the most popular search engines available. Due to Solr&rsquo;s many features and its low barrier to entry it can be an ideal candidate when seeking a search engine. Solarium, a PHP Solr Client, takes Solr one step further by giving developers easier access to the Solr API.</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Listing 1 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="err"> </span> <span class="err"> </span> <span class="err">&amp;ldquo;require&amp;rdquo;:</span> <span class="err">{</span>
</span><span class='line'><span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err">&amp;ldquo;solarium/solarium&amp;rdquo;:</span> <span class="err">&amp;ldquo;3.0.0&amp;rdquo;</span>
</span><span class='line'><span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Listing 2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$config = array(</span>
</span><span class='line'><span class="x">    &amp;lsquo;endpoint&amp;rsquo; =&gt; array(</span>
</span><span class='line'><span class="x">        &amp;lsquo;localhost&amp;rsquo; =&gt; array(</span>
</span><span class='line'><span class="x">            &amp;lsquo;host&amp;rsquo; =&gt; &amp;lsquo;127.0.0.1&amp;rsquo;, &amp;lsquo;port&amp;rsquo; =&gt; &amp;lsquo;8983&amp;rsquo;, &amp;lsquo;path&amp;rsquo; =&gt; &amp;lsquo;/solr/&amp;rsquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;    )</span>
</span><span class='line'><span class="x">)</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// new Solarium Client object</span>
</span><span class='line'><span class="x">$client = new Solarium\Client($config);</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Listing 3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Introduction to Solr: Search is an important part of most web projects and should be given much care. Throughout the years, making content searchable has changed a great deal. Obviously, exposing SQL queries to users through search is dangerous. Modern search implementations require a secure approach, such as a stand-alone search server, separate from site data. There are many search options to choose from. Your search list might include: Sphinx, Flax, ElasticSearch, Google, and Solr. Solr’s scalability, speed, built in features and community make it an ideal platform for any project. Luckily, integrating Solr into your PHP project has been made easy by the Solarium Project.</p>

<p>In Apache’s own words, “<em>Solr is an open source enterprise search server based on the Lucene Java search library, with XML/HTTP and JSON, Ruby, and Python APIs, hit highlighting, faceted search, caching, replication, and a web administration interface</em>” [1]. Apache Solr is an open source, extensible, stand-alone search engine, built on Lucene, managed by The Apache Software Foundation. There are currently two stable versions of Solr available for use; Solr 3.6.2 and Solr 4.0. Either version may be used with Solarium; Solr 4 ships with added features, however, so use Solr 4 if possible.</p>

<p>Solr is designed to run as a stand-alone Java web application (app). The documentation for downloading, installing, and running Solr can be found at <a href="http://lucene.apache.org/solr/tutorial.html" title="Solr Tutorial">http://lucene.apache.org/solr/tutorial.html</a>. Because Solr is meant to be separate from the primary project, it can be installed anywhere. All interactions with Solr happen over HTTP through a REST-like API. Solarium utilizes both PHP and JSON for its interactions with Solr.</p>

<p>One of the greatest features of Solr is its scalability. Replication can be set up to run multiple Solr instances in a master/slave setup, just like MySQL replication.The documentation for setting up a master/slave setup is very thorough, so it will not be discussed further here. Another option for scaling Solr is to search multiple search cores. Solr can run multiple search cores at a time. Solr can search multiple cores at a time through its distributed search and sharding capabilities. Large search indexes can be split into multiple smaller indexes; then through a distributed search multiple cores are searched. The best part of a multicore search setup is that not all cores need to exist on the same server. This allows for very flexible search architecture.</p>

<h3>Solarium acts as a bridge</h3>

<p>Solr has a REST-like API, so interactions with it are very simple and happen over HTTP. The Solarium Project is “<em>an open source Solr client library for PHP applications</em>” [2], which makes interacting with Solr even simpler. Solarium exists to expose the Solr API through an easy to use PHP library.</p>

<p>Installation of Solarium has been made very easy through the use of Composer (Listing 1). Installing through Composer will automatically add the library to the PHP autoload path. To install Solarium into a project not utilizing Composer, the files will need to be downloaded from GitHub (<a href="https://github.com/basdenooijer/solarium/tags" title="Solarium Library">https://github.com/basdenooijer/solarium/tags</a>). Next, add the solarium library to the PHP autoload path manually. After Solarium is installed, Solr can be accessed through sending a Solarium Client ($client) object to a configuration array. The configuration array should be made up of the Solr host, port and path (Listing 2).</p>

<h3>Adding content to Solr</h3>

<p>Before anything can be searched in Solr, documents (docs) must be added to the Solr index. Solr maintains a collection of docs in its index. A doc is a collection of fields and values. Solr fields must be defined in the Solr schema. A field can occur multiple times in a doc.</p>

<p>To make an update to Solr using Solarium, start with the <code>$client</code> object. Using the <code>$client</code> object, create an <code>$update</code> instance then make a doc:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update = $client-&gt;createUpdate();</span>
</span><span class='line'><span class="x">$doc1 = $update-&gt;createDocument();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
With the newly created <code>$doc</code>, begin adding content to Solr fields as instances of the $doc:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$doc1-&gt;id = 123;</span>
</span><span class='line'><span class="x">$doc1-&gt;name = &amp;lsquo;First Document&amp;rsquo;;</span>
</span><span class='line'><span class="x">$doc1-&gt;text = &amp;lsquo;This is the first document\&amp;rsquo;s content&amp;rsquo;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Create another doc</span>
</span><span class='line'><span class="x">$doc2 = $update-&gt;createDocument();</span>
</span><span class='line'><span class="x">$doc2-&gt;id = 234;</span>
</span><span class='line'><span class="x">$doc2-&gt;name = &amp;lsquo;Next Document&amp;rsquo;;</span>
</span><span class='line'><span class="x">$doc2-&gt;text = &amp;lsquo;This is the next document\&amp;rsquo;s content&amp;rsquo;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
In this example, the Solr schema would have to be set up to accept the id, name and text fields. Solr ships with an example search app with a good demo of a Solr schema; each field will need to be added to the schema in order for Solr to add the docs to the search index (Listing 3). Next, add each <code>$doc</code> created to an array so that <code>addDocuments()</code> can be called on the array. This will run the Solr add command for every document in the array:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDocuments(array($doc1, $doc2));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The newly-added docs will not actually become a permanent part of the Solr index until Solr is told to commit all added docs to its index. To do this with Solarium, call <code>addCommit()</code> to generate a commit message for Solr, then a call to <code>update()</code> with the <code>$update</code> will send the commit:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addCommit(); $client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The new docs should now exist and be searchable using Solr.</p>

<h3>Searching Solr through Solarium</h3>

<p>Solarium offers a robust PHP API for searching Solr. To run a basic query, start with the $client object. Next, call the <code>createSelect()</code> instance of the <code>$client</code> object to generate the query for execution:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$query = $client=&gt;createSelect();&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// &lt;em&gt;:&lt;/em&gt; is equivalent to telling solr to return all docs</span>
</span><span class='line'><span class="x">$query-&gt;setQuery(&amp;lsquo;&lt;em&gt;:&lt;/em&gt;&amp;rsquo;);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Because the <code>createSelect()</code> function is being used to generate the query, the <code>select()</code> function should be used when executing the query:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$resultSet = $client-&gt;select($query);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Use the $resultSet array to iterate over the array and display the results:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">echo &amp;lsquo;&lt;div class=&quot;search-results&quot;&gt;&amp;rsquo;;</span>
</span><span class='line'><span class="x">foreach ($resultSet as $result) {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;echo &#39;&amp;lt;div class=&quot;search-result&quot;&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;p&amp;gt;&#39; . $result-&amp;gt;id . &#39;&amp;lt;/p&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;p&amp;gt;&#39; . $result-&amp;gt;name . &#39;&amp;lt;/p&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;p&amp;gt;&#39; . $result-&amp;gt;text . &#39;&amp;lt;/p&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;/div&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">echo &amp;lsquo;&lt;/div&gt;&amp;rsquo;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The <code>$resultSet</code> can also be refined. Setting up pagination, for instance, is very easy:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$query-&gt;setStart(0)&amp;ndash;&gt;setRows(10);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Sorting is also very easy (note that Solr will sort by score if no sort is set):
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$query-&gt;addSort(&amp;lsquo;name&amp;rsquo;, Select::SORT_ASC);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Filtering, setting query fields, boosting, and faceting are also possible ways of searching Solr. Filtering is another way of narrowing search results without using a query. Query fields allow for control over what fields are searched. Boosting gives certain field’s higher precedence in the Search. Facets give users a way to better navigate search results. Solarium gives easy access to all the various ways of searching Solr content.</p>

<h3>Removing content from Solr</h3>

<p>Solr does not have a command called update; however, updates can be performed by re-adding content. Solr uses a unique identifier for each doc and only allows for one instance of the identifier in the search index. To update content, call the add command on an already existent Solr doc id. Sometimes updating Solr with new content isn’t enough. Sometimes the need to delete content from Solr arises. Doing this is similar to when adding docs, create an $update instance:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update = $client-&gt;createUpdate();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Using the $update instance, documents can be deleted by id or by query. This offers a great deal of flexibility for deleting content. Deleting by id is used more often because it offers very precise deletes:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDeleteById(234);</span>
</span><span class='line'><span class="x">$update-&gt;addCommit();</span>
</span><span class='line'><span class="x">$client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Deleting by query, however, can be incredibly powerful and useful. When starting development of a new search project with test content, for instance, deleting by query offers the ability to remove all test content. If all the test content starts with the word test, deleting the content is simple:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDeleteQuery(&amp;lsquo;name:test&lt;em&gt;&amp;rsquo;);</span>
</span><span class='line'><span class="x">$update-&gt;addCommit();</span>
</span><span class='line'><span class="x">$client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Another common practice is to wipe the index and start fresh. Using delete by query, this task is again made very simple:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDeleteQuery(&amp;lsquo;&lt;/em&gt;:*&amp;rsquo;);</span>
</span><span class='line'><span class="x">$update-&gt;addCommit();</span>
</span><span class='line'><span class="x">$client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Solarium’s delete doc API is very useful in maintaining an up-to-date search index.</p>

<h3>Conclusion</h3>

<p>Solr is an incredibly scalable, powerful and easy-to-use search engine that should be considered for any search project. Solr is designed to be language agnostic through its REST-like API, and thanks to Solarium it fits very easily into any PHP project. This article covers only three use cases for Solarium; the examples shipped with Solarium offer a great deal more. Search highlighting, debugging, optimizing, and ‘more like this’ functionality are all possible with Solr and Solarium.</p>

<h4>References</h4>

<ol>
<li>Apache Solr: <a href="http://projects.apache.org/projects/solr.html">http://projects.apache.org/projects/solr.html</a></li>
<li>The Solarium Project: <a href="http://www.solarium-project.org/">http://www.solarium-project.org/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony2 Access Conrol]]></title>
    <link href="http://harmssite.com/2013/03/symfony2-access-conrol/"/>
    <updated>2013-03-02T00:00:00-06:00</updated>
    <id>http://harmssite.com/2013/03/symfony2-access-conrol</id>
    <content type="html"><![CDATA[<p>I am very new to Symfony development. While developing a side project app I found I needed to control access to a certain area to logged in users only. Based on my previous development history I was expecting to have to determine if a user was logged in via the controller. I figured I would need to find an <code>is_logged_in</code> boolean and use it to determine user access control. What I found while doing my development is that Symfony2 takes care of access control in a much more eloquent way. Rather than having to determine if a user is logged in inside each controller, Symfony2 controls access using a system similar to its routing system. Inside a Symfony2 app there is, by default, a <code>security.yml</code> file that is used to control access. Inside the <code>security.yml</code> file locate the <code>access_control</code> declaration. By simply declaring a route inside the <code>access_control</code> yml array we can control which users have access to which routes, like so:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">access_control:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;- { path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">^/login$, role</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">IS_AUTHENTICATED_ANONYMOUSLY }</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="nv">^/register</span><span class="p-Indicator">,</span> <span class="nv">role</span><span class="p-Indicator">:</span> <span class="nv">IS_AUTHENTICATED_ANONYMOUSLY</span> <span class="p-Indicator">}</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="nv">^/resetting</span><span class="p-Indicator">,</span> <span class="nv">role</span><span class="p-Indicator">:</span> <span class="nv">IS_AUTHENTICATED_ANONYMOUSLY</span> <span class="p-Indicator">}</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="nv">^/admin/</span><span class="p-Indicator">,</span> <span class="nv">role</span><span class="p-Indicator">:</span> <span class="nv">ROLE_ADMIN</span> <span class="p-Indicator">}</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="nv">^/new</span><span class="p-Indicator">,</span> <span class="nv">role</span><span class="p-Indicator">:</span> <span class="nv">ROLE_USER</span> <span class="p-Indicator">}</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
As you can see with my code, for anything beyond the <code>/admin/</code> route the <code>ROLE_ADMIN</code> is required. And for anyone accessing the <code>/new</code> route the <code>ROLE_USER</code> is required.</p>

<p>This is obviously pretty trivial stuff, but for somebody new to Symfony2 development like myself, I found it an incredibly simple and powerful way of controlling access to my app.</p>
]]></content>
  </entry>
  
</feed>
