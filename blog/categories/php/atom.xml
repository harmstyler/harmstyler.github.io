<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | HarmsSite]]></title>
  <link href="http://harmssite.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://harmssite.com/"/>
  <updated>2014-02-07T21:08:34-06:00</updated>
  <id>http://harmssite.com/</id>
  <author>
    <name><![CDATA[Tyler Harms]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abstract Time Stamped Entity in Symfony2]]></title>
    <link href="http://harmssite.com/2014/02/abstract-time-stamped-entity-in-symfony2/"/>
    <updated>2014-02-07T16:56:00-06:00</updated>
    <id>http://harmssite.com/2014/02/abstract-time-stamped-entity-in-symfony2</id>
    <content type="html"><![CDATA[<p>One of my favorite features of Ruby on Rails is that all models are timestamped by default. Ruby on Rails, of course, opts for convention over configuration. Symfony2, on the other hand, opts for configuration over convention. Anyone who has worked with Symfony2 can speak to the mass of config files that exist in a project. I can understand, therefore, why timestamped models (entities) are not a feature in Symfony2. In this post I will show how to add timestamp all your Symfony2 entities. For this post, I chose to use Doctrine as my ORM, so all code show directly relates to Doctrine and Symfony2.</p>

<p>Luckily, adding and updated and created fields to an entity in Symfony2 with Doctrine is quite easy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&amp;ldquo;created&amp;rdquo;, type=&amp;ldquo;datetime&amp;rdquo;)</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">private $created;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&amp;ldquo;updated&amp;rdquo;, type=&amp;ldquo;datetime&amp;rdquo;)</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">private $updated;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;public function __construct()</span>
</span><span class='line'><span class="x">{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;$this-&amp;gt;setCreated(new \DateTime());</span>
</span><span class='line'><span class="x">$this-&amp;gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// getters &amp;amp; setters&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Auto set the updated date</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\PreUpdate</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">public function setUpdatedValue()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">   $this-&gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code should be pretty self explanitory, we have two DateTime field types that get initially set on entity creation in the contstructor. I then add a <code>setUpdatedValue()</code> function that runs when on PreUpdate of the entity.</p>

<p>The above code works very well, but it is not an ideal solution for working with multiple models. Of course, we could add the updated/created values to every entity, but that wouldn&rsquo;t be very <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" title="Don't Repeat Yourself">DRY</a> of us.</p>

<!-- more -->


<p>The solution is to use an <a href="http://www.php.net/manual/en/language.oop5.abstract.php">Abstract Class</a> that our entity can extend. The abstract class, <code>TimeStampedEntity</code>, will have two entity variables <code>$updated</code> and <code>$created</code> and will look nearly identical to the code above when it is complete. The key that will make this work with Doctrine and Symfony2 is Doctrine&rsquo;s <a href="http://docs.doctrine-project.org/en/latest/reference/inheritance-mapping.html#mapped-superclasses"><code>MappedSuperclass</code></a> declaration that tells Symfony and Doctrine that the abstract class is a Superclass with declared entity attributes. What we are left with is a Superclass that can extend any model to add <code>updated</code> and <code>created</code> attributes to your data.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TimeStampedEntity.php <a href="https://gist.github.com/harmstyler/8875484">https://gist.github.com/harmstyler/8875484</a> Gist </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * TimeStampedEntity.php</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;namespace HarmsTyler\Common\Entity;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;use Doctrine\ORM\Mapping as ORM;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Post</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\MappedSuperclass</span>
</span><span class='line'><span class="x"> * @ORM\HasLifecycleCallbacks</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">abstract class TimeStampedEntity {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;/**</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&quot;created&quot;, type=&quot;datetime&quot;)</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">private $created;</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * @var \DateTime</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Column(name=&quot;updated&quot;, type=&quot;datetime&quot;)</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">private $updated;</span>
</span><span class='line'>
</span><span class='line'><span class="x">public function __construct()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $this-&amp;gt;setCreated(new \DateTime());</span>
</span><span class='line'><span class="x">    $this-&amp;gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Set created</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param \DateTime $created</span>
</span><span class='line'><span class="x"> * @return Post</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setCreated($created)</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $this-&amp;gt;created = $created;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Get created</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @return \DateTime</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function getCreated()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;created;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Set updated</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param \DateTime $updated</span>
</span><span class='line'><span class="x"> * @return Post</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setUpdated($updated)</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $this-&amp;gt;updated = $updated;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Get updated</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @return \DateTime</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function getUpdated()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;updated;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Auto set the updated date</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\PreUpdate</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function setUpdatedValue()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">   $this-&amp;gt;setUpdated(new \DateTime());</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>An example in use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Post.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;namespace Blend\Iterate\BlogBundle\Entity;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;use Doctrine\ORM\Mapping as ORM;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Post</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @ORM\Table()</span>
</span><span class='line'><span class="x"> * @ORM\Entity</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">class Post extends TimeStampedEntity</span>
</span><span class='line'><span class="x">{</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony2 Coding Standards]]></title>
    <link href="http://harmssite.com/2013/04/symfony2-coding-standards/"/>
    <updated>2013-04-30T13:30:00-05:00</updated>
    <id>http://harmssite.com/2013/04/symfony2-coding-standards</id>
    <content type="html"><![CDATA[<p>With eZ Publish moving to Symfony2, I found that I was in need of learning some new coding standards. I never really looked into PHP CodeSniffer while doing eZ Publish development (most of my code was in the templates), so I never really thought about PHP CodeSniffer as an option until starting work with Symphony2. To the point, I just wanted to share the <a href="https://github.com/opensky/Symfony2-coding-standard">Symfony2 PHP CodeSniffer Coding Standard on Github</a>. It is really easy to install and because phpcs works with PHPStorm and Sublime Text 2, sniffing out php files couldn&rsquo;t be easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Searching with Solr - Integrating Solr into any PHP project is easy with Solarium [REPOST]]]></title>
    <link href="http://harmssite.com/2013/03/start-search-with-solr-integrating-solr-into-any-php-project-is-easy-with-solarium-repost/"/>
    <updated>2013-03-15T00:00:00-05:00</updated>
    <id>http://harmssite.com/2013/03/start-search-with-solr-integrating-solr-into-any-php-project-is-easy-with-solarium-repost</id>
    <content type="html"><![CDATA[<p style="text-align:center;">This post is a repost of an article I wrote for <a title="Web and PHP Magazine" href="http://webandphp.com/" target="_blank">Web and PHP Magazine</a>&rsquo;s <a title="Web and PHP February Issue" href="http://webandphp.com/issue-11" target="_blank">February issue</a>.</p>

<h4>Solr has quickly become one of the most popular search engines available. Due to Solr&rsquo;s many features and its low barrier to entry it can be an ideal candidate when seeking a search engine. Solarium, a PHP Solr Client, takes Solr one step further by giving developers easier access to the Solr API.</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Listing 1 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="err"> </span> <span class="err"> </span> <span class="err">&amp;ldquo;require&amp;rdquo;:</span> <span class="err">{</span>
</span><span class='line'><span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err">&amp;ldquo;solarium/solarium&amp;rdquo;:</span> <span class="err">&amp;ldquo;3.0.0&amp;rdquo;</span>
</span><span class='line'><span class="err"> </span> <span class="err"> </span> <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Listing 2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$config = array(</span>
</span><span class='line'><span class="x">    &amp;lsquo;endpoint&amp;rsquo; =&gt; array(</span>
</span><span class='line'><span class="x">        &amp;lsquo;localhost&amp;rsquo; =&gt; array(</span>
</span><span class='line'><span class="x">            &amp;lsquo;host&amp;rsquo; =&gt; &amp;lsquo;127.0.0.1&amp;rsquo;, &amp;lsquo;port&amp;rsquo; =&gt; &amp;lsquo;8983&amp;rsquo;, &amp;lsquo;path&amp;rsquo; =&gt; &amp;lsquo;/solr/&amp;rsquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;    )</span>
</span><span class='line'><span class="x">)</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// new Solarium Client object</span>
</span><span class='line'><span class="x">$client = new Solarium\Client($config);</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Listing 3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Introduction to Solr: Search is an important part of most web projects and should be given much care. Throughout the years, making content searchable has changed a great deal. Obviously, exposing SQL queries to users through search is dangerous. Modern search implementations require a secure approach, such as a stand-alone search server, separate from site data. There are many search options to choose from. Your search list might include: Sphinx, Flax, ElasticSearch, Google, and Solr. Solr’s scalability, speed, built in features and community make it an ideal platform for any project. Luckily, integrating Solr into your PHP project has been made easy by the Solarium Project.</p>

<p>In Apache’s own words, “<em>Solr is an open source enterprise search server based on the Lucene Java search library, with XML/HTTP and JSON, Ruby, and Python APIs, hit highlighting, faceted search, caching, replication, and a web administration interface</em>” [1]. Apache Solr is an open source, extensible, stand-alone search engine, built on Lucene, managed by The Apache Software Foundation. There are currently two stable versions of Solr available for use; Solr 3.6.2 and Solr 4.0. Either version may be used with Solarium; Solr 4 ships with added features, however, so use Solr 4 if possible.</p>

<p>Solr is designed to run as a stand-alone Java web application (app). The documentation for downloading, installing, and running Solr can be found at <a href="http://lucene.apache.org/solr/tutorial.html" title="Solr Tutorial">http://lucene.apache.org/solr/tutorial.html</a>. Because Solr is meant to be separate from the primary project, it can be installed anywhere. All interactions with Solr happen over HTTP through a REST-like API. Solarium utilizes both PHP and JSON for its interactions with Solr.</p>

<p>One of the greatest features of Solr is its scalability. Replication can be set up to run multiple Solr instances in a master/slave setup, just like MySQL replication.The documentation for setting up a master/slave setup is very thorough, so it will not be discussed further here. Another option for scaling Solr is to search multiple search cores. Solr can run multiple search cores at a time. Solr can search multiple cores at a time through its distributed search and sharding capabilities. Large search indexes can be split into multiple smaller indexes; then through a distributed search multiple cores are searched. The best part of a multicore search setup is that not all cores need to exist on the same server. This allows for very flexible search architecture.</p>

<h3>Solarium acts as a bridge</h3>

<p>Solr has a REST-like API, so interactions with it are very simple and happen over HTTP. The Solarium Project is “<em>an open source Solr client library for PHP applications</em>” [2], which makes interacting with Solr even simpler. Solarium exists to expose the Solr API through an easy to use PHP library.</p>

<p>Installation of Solarium has been made very easy through the use of Composer (Listing 1). Installing through Composer will automatically add the library to the PHP autoload path. To install Solarium into a project not utilizing Composer, the files will need to be downloaded from GitHub (<a href="https://github.com/basdenooijer/solarium/tags" title="Solarium Library">https://github.com/basdenooijer/solarium/tags</a>). Next, add the solarium library to the PHP autoload path manually. After Solarium is installed, Solr can be accessed through sending a Solarium Client ($client) object to a configuration array. The configuration array should be made up of the Solr host, port and path (Listing 2).</p>

<h3>Adding content to Solr</h3>

<p>Before anything can be searched in Solr, documents (docs) must be added to the Solr index. Solr maintains a collection of docs in its index. A doc is a collection of fields and values. Solr fields must be defined in the Solr schema. A field can occur multiple times in a doc.</p>

<p>To make an update to Solr using Solarium, start with the <code>$client</code> object. Using the <code>$client</code> object, create an <code>$update</code> instance then make a doc:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update = $client-&gt;createUpdate();</span>
</span><span class='line'><span class="x">$doc1 = $update-&gt;createDocument();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
With the newly created <code>$doc</code>, begin adding content to Solr fields as instances of the $doc:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$doc1-&gt;id = 123;</span>
</span><span class='line'><span class="x">$doc1-&gt;name = &amp;lsquo;First Document&amp;rsquo;;</span>
</span><span class='line'><span class="x">$doc1-&gt;text = &amp;lsquo;This is the first document\&amp;rsquo;s content&amp;rsquo;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Create another doc</span>
</span><span class='line'><span class="x">$doc2 = $update-&gt;createDocument();</span>
</span><span class='line'><span class="x">$doc2-&gt;id = 234;</span>
</span><span class='line'><span class="x">$doc2-&gt;name = &amp;lsquo;Next Document&amp;rsquo;;</span>
</span><span class='line'><span class="x">$doc2-&gt;text = &amp;lsquo;This is the next document\&amp;rsquo;s content&amp;rsquo;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
In this example, the Solr schema would have to be set up to accept the id, name and text fields. Solr ships with an example search app with a good demo of a Solr schema; each field will need to be added to the schema in order for Solr to add the docs to the search index (Listing 3). Next, add each <code>$doc</code> created to an array so that <code>addDocuments()</code> can be called on the array. This will run the Solr add command for every document in the array:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDocuments(array($doc1, $doc2));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The newly-added docs will not actually become a permanent part of the Solr index until Solr is told to commit all added docs to its index. To do this with Solarium, call <code>addCommit()</code> to generate a commit message for Solr, then a call to <code>update()</code> with the <code>$update</code> will send the commit:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addCommit(); $client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The new docs should now exist and be searchable using Solr.</p>

<h3>Searching Solr through Solarium</h3>

<p>Solarium offers a robust PHP API for searching Solr. To run a basic query, start with the $client object. Next, call the <code>createSelect()</code> instance of the <code>$client</code> object to generate the query for execution:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$query = $client-&gt;createSelect();&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// &lt;em&gt;:&lt;/em&gt; is equivalent to telling solr to return all docs</span>
</span><span class='line'><span class="x">$query-&gt;setQuery(&amp;lsquo;&lt;em&gt;:&lt;/em&gt;&amp;rsquo;);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Because the <code>createSelect()</code> function is being used to generate the query, the <code>select()</code> function should be used when executing the query:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$resultSet = $client-&gt;select($query);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Use the $resultSet array to iterate over the array and display the results:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">echo &amp;lsquo;&lt;div class=&quot;search-results&quot;&gt;&amp;rsquo;;</span>
</span><span class='line'><span class="x">foreach ($resultSet as $result) {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;echo &#39;&amp;lt;div class=&quot;search-result&quot;&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;p&amp;gt;&#39; . $result-&amp;gt;id . &#39;&amp;lt;/p&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;p&amp;gt;&#39; . $result-&amp;gt;name . &#39;&amp;lt;/p&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;p&amp;gt;&#39; . $result-&amp;gt;text . &#39;&amp;lt;/p&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">echo &#39;&amp;lt;/div&amp;gt;&#39;;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">echo &amp;lsquo;&lt;/div&gt;&amp;rsquo;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The <code>$resultSet</code> can also be refined. Setting up pagination, for instance, is very easy:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$query-&gt;setStart(0)&amp;ndash;&gt;setRows(10);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Sorting is also very easy (note that Solr will sort by score if no sort is set):
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$query-&gt;addSort(&amp;lsquo;name&amp;rsquo;, Solarium_Query_Select::SORT_ASC);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Filtering, setting query fields, boosting, and faceting are also possible ways of searching Solr. Filtering is another way of narrowing search results without using a query. Query fields allow for control over what fields are searched. Boosting gives certain field’s higher precedence in the Search. Facets give users a way to better navigate search results. Solarium gives easy access to all the various ways of searching Solr content.</p>

<h3>Removing content from Solr</h3>

<p>Solr does not have a command called update; however, updates can be performed by re-adding content. Solr uses a unique identifier for each doc and only allows for one instance of the identifier in the search index. To update content, call the add command on an already existent Solr doc id. Sometimes updating Solr with new content isn’t enough. Sometimes the need to delete content from Solr arises. Doing this is similar to when adding docs, create an $update instance:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update = $client-&gt;createUpdate();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Using the $update instance, documents can be deleted by id or by query. This offers a great deal of flexibility for deleting content. Deleting by id is used more often because it offers very precise deletes:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDeleteById(234);</span>
</span><span class='line'><span class="x">$update-&gt;addCommit();</span>
</span><span class='line'><span class="x">$client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Deleting by query, however, can be incredibly powerful and useful. When starting development of a new search project with test content, for instance, deleting by query offers the ability to remove all test content. If all the test content starts with the word test, deleting the content is simple:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDeleteQuery(&amp;lsquo;name:test&lt;em&gt;&amp;rsquo;);</span>
</span><span class='line'><span class="x">$update-&gt;addCommit();</span>
</span><span class='line'><span class="x">$client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Another common practice is to wipe the index and start fresh. Using delete by query, this task is again made very simple:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$update-&gt;addDeleteQuery(&amp;lsquo;&lt;/em&gt;:*&amp;rsquo;);</span>
</span><span class='line'><span class="x">$update-&gt;addCommit();</span>
</span><span class='line'><span class="x">$client-&gt;update($update);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Solarium’s delete doc API is very useful in maintaining an up-to-date search index.</p>

<h3>Conclusion</h3>

<p>Solr is an incredibly scalable, powerful and easy-to-use search engine that should be considered for any search project. Solr is designed to be language agnostic through its REST-like API, and thanks to Solarium it fits very easily into any PHP project. This article covers only three use cases for Solarium; the examples shipped with Solarium offer a great deal more. Search highlighting, debugging, optimizing, and ‘more like this’ functionality are all possible with Solr and Solarium.</p>

<h4>References</h4>

<ol>
<li>Apache Solr: <a href="http://projects.apache.org/projects/solr.html">http://projects.apache.org/projects/solr.html</a></li>
<li>The Solarium Project: <a href="http://www.solarium-project.org/">http://www.solarium-project.org/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping a page with php]]></title>
    <link href="http://harmssite.com/2012/01/scraping-a-page-with-php/"/>
    <updated>2012-01-24T00:00:00-06:00</updated>
    <id>http://harmssite.com/2012/01/scraping-a-page-with-php</id>
    <content type="html"><![CDATA[<p>I ran across a problem recently, I needed to get the contents of a page so that I could mimic a widget’s functionality without having access to the database that said page’s widget used (confused yet). Basically, one site had a widget that displayed an upcoming event (information with came from a database), I needed to copy that widget to another website. Moreover, I did not want to use JavaScript to accomplish my goal because I need the new site to be cached pretty heavily on the server. My first thought was to use cURL, but when I ran curl_exec my function would output the entire page contents onto my new site, something that I did not want, I only wanted a small portion of the website. My next option was to use <code>file_get_contents(“my_url”)</code>, as was pointed out to me, this will return the full page as a string. With this I could have accomplished my goal, but not with as much ease as I would hope. I ran into the <code>DOMDOcument()</code> php object a while back and was curious about what I could do with it so I decided to do some research on that. This would eventually lead me to my answer. It turns out that the script is very simple and I can see myself using it quite often so I decided to share it.
Here it is:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">public function scrapePage($url,$id){&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;$d = new DOMDOcument();</span>
</span><span class='line'><span class="x">libxml_use_internal_errors(true);</span>
</span><span class='line'><span class="x">$d-&amp;gt;loadHTMLFile($url);</span>
</span><span class='line'><span class="x">$widget = $d-&amp;gt;getElementById($id);</span>
</span><span class='line'>
</span><span class='line'><span class="x">if ($widget !== null) {</span>
</span><span class='line'><span class="x">    return simplexml_import_dom($widget)-&amp;gt;asXML();</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
